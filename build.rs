use std::fs::{File,read_dir};
use std::io::Write;
use std::path::{Path, PathBuf};

fn main() {
    let advent_path = Path::new("src/advent/");
    let dest_path = Path::new("src/advent/_all_days.rs");
    let mut f = File::create(&dest_path).unwrap();

    let mut days: Vec<String> = Vec::new();
    let mut paths = read_dir(advent_path).unwrap()
                                         .map(|e| e.unwrap().path())
                                         .collect::<Vec<PathBuf>>();
    paths.sort();
    for path in paths {
        match path.file_stem() {
            Some(filename) => {
                let filename = filename.to_str().unwrap();
                if filename.starts_with("day") {
                    days.push(filename.to_string());
                }
            },
            None => { }
        }
    }

    f.write(
br###"// GENERATED BY build.rs
// DO NOT EDIT BY HAND, CHANGES WILL BE LOST.
use anyhow::format_err;
"###).unwrap();
    for module in &days {
        write!(f, "pub mod {};\n", module).unwrap();
    }

    f.write(br###"
// Execute the solution for a particular day (1..25).
pub fn solve(day: usize) -> Result<(), anyhow::Error> {
    let mut solver: Box<dyn AdventSolver> = match day {
"###).unwrap();
    for module in &days {
        let day_num = module[3..].parse::<usize>().unwrap();
        write!(f, "         {} => Box::new({}::Solver::default()),\n",
               day_num, module).unwrap();
    }
    f.write(
br###"         _ => { return Err(format_err!("Invalid day number: {}", day)); }
    };
    solver.solve()
}
"###).unwrap();
}
